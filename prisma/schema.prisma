// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String     @id @default(uuid())
  name               String?    @unique
  image              String?    @unique
  rating             Int        @default(0)
  role               String     @default("default")
  email              String?    @unique
  emailVerified      DateTime?
  accounts           Account[]
  sessions           Session[]
  comments           Comment[]
  reviews            Review[]
  rates              Rate[]
  materials_likes    Material[] @relation(name: "materials_likes")
  materials_dislikes Material[] @relation(name: "materials_dislikes")
  quotes_likes       Quote[]    @relation(name: "quotes_likes")
  quotes_dislikes    Quote[]    @relation(name: "quotes_dislikes")
  reviews_likes      Review[]   @relation(name: "reviews_likes")
  reviews_dislikes   Review[]   @relation(name: "reviews_dislikes")
  files              File[]
  materials          Material[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id       String   @id @default(uuid())
  text     String
  time     DateTime @default(now())
  userId   String
  postId   String
  parentId String?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  review   Review    @relation(map: "reviews_comments", fields: [postId], references: [id], onDelete: Cascade)
  material Material  @relation(map: "materials_comments", fields: [postId], references: [id], onDelete: Cascade)
  news     News      @relation(map: "news_comments", fields: [postId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation(name: "comment_parents", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments Comment[] @relation(name: "comment_parents")
}

model Discipline {
  id        String     @id @default(uuid())
  name      String     @unique
  tutors    Tutor[]
  materials Material[]
}

model Faculty {
  id        String     @id @default(uuid())
  name      String     @unique
  tutors    Tutor[]
  materials Material[]
}

model File {
  id     String   @id @default(uuid())
  url    String
  block  String
  time   DateTime @default(now())
  userId String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Material {
  id           String   @id @default(uuid())
  url          String
  block        String
  time         DateTime @default(now())
  description  String?
  header       String
  disciplineId String?
  facultyId    String?
  userId       String
  tutorId      String?

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tutor      Tutor?      @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  faculty    Faculty?    @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  discipline Discipline? @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  comments   Comment[]
  likes      User[]      @relation(name: "materials_likes")
  dislikes   User[]      @relation(name: "materials_dislikes")
}

model News {
  id     String   @id @default(uuid())
  body   String
  header String
  time   DateTime @default(now())

  comments Comment[]
}

model LegacyRating {
  id               String @id @default(uuid())
  personality      Float
  personalityCount Int
  exams            Float
  examsCount       Int
  quality          Float
  qualityCount     Int
  tutorId          String @unique

  tutor Tutor @relation(fields: [tutorId], references: [id], onDelete: Cascade)
}

model Quote {
  id      String @id @default(uuid())
  body    String
  tutorId String

  tutor    Tutor  @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  likes    User[] @relation(name: "quotes_likes")
  dislikes User[] @relation(name: "quotes_dislikes")
}

model Rate {
  id          String @id @default(uuid())
  punctuality Int
  personality Int
  exams       Int
  quality     Int
  tutorId     String
  userId      String

  tutor Tutor @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id      String   @id @default(uuid())
  header  String
  body    String
  time    DateTime @default(now())
  userId  String
  tutorId String

  tutor    Tutor     @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    User[]    @relation(name: "reviews_likes")
  dislikes User[]    @relation(name: "reviews_dislikes")

  @@unique([userId, tutorId])
}

model Tutor {
  id         String   @id @default(uuid())
  firstName  String?
  lastName   String
  fatherName String?
  nickName   String?
  url        String?
  updated    DateTime @default(now())

  rates        Rate[]
  reviews      Review[]
  disciplines  Discipline[]
  faculties    Faculty[]
  materials    Material[]
  legacyRating LegacyRating?
  quotes       Quote[]
}
